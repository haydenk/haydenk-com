AWSTemplateFormatVersion: '2010-09-09'
Description: haydenk.com Deployment Stack
Parameters:
  PrimaryDomain:
    Type: String
  SecondaryDomain:
    Type: String
  CertificateId:
    Type: String
  HostedZone:
    Type: String
  HostnameRedirectLambdaName:
    Type: String
    Default: haydenk-com-hostname-redirect
  ManagedCachingOptimizedPolicy:
    Type: String
    Default: 658327ea-f89d-4fab-a63d-7e88639e58f6
  ManagedOriginRequestPolicyUserAgentRefererHeaders:
    Type: String
    Default: acba4595-bd28-49b8-b9fe-13317c0390fa
  ProjectIdTag:
    Type: String
    Default: haydenk.com
Resources:
  WebsiteCloudfrontOriginId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity

  WebsiteHostnameRedirectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hostname-redirect-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub
                  - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LogGroupName}:*'
                  - { LogGroupName: !Ref HostnameRedirectLambdaName }
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  WebsiteHostnameRedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref HostnameRedirectLambdaName
      Description: |
        This is an embedded lambda@edge in CloudFront
        that redirects any request where the hostname
        is not the same as the primary domain TO the primary domain.
      Role: !GetAtt WebsiteHostnameRedirectLambdaRole.Arn
      Code:
        ZipFile: |
          'use strict';
          exports.handler = async (event, context) => {
              const response = {
                  status: '302',
                  statusDescription: 'Found',
                  headers: {
                      location: [{
                          key: 'Location',
                          value: 'https://github.com/haydenk',
                      }],
                  },
              };
              return response;
          };
      Handler: index.handler
      Runtime: nodejs12.x
      TracingConfig:
        Mode: Active
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  WebsiteHostnameRedirectLambdaVersionA:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref WebsiteHostnameRedirectLambda

  WebsiteCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref PrimaryDomain
          - !Ref SecondaryDomain
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: !Ref ManagedCachingOptimizedPolicy
          OriginRequestPolicyId: !Ref ManagedOriginRequestPolicyUserAgentRefererHeaders
          SmoothStreaming: false
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: false
              LambdaFunctionARN: !Ref WebsiteHostnameRedirectLambdaVersionA
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Sub
            - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateId}'
            - { CertificateId: !Ref CertificateId }
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  PrimaryDomainRecordV4:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PrimaryDomain
      Type: A
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  PrimaryDomainRecordV6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PrimaryDomain
      Type: AAAA
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  SecondaryDomainRecordV4:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref SecondaryDomain
      Type: A
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  SecondaryDomainRecordV6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref SecondaryDomain
      Type: AAAA
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

Outputs:
  RedirectLambdaName:
    Value: !Ref WebsiteHostnameRedirectLambda
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteHostnameRedirectLambda"
  RedirectLambdaArn:
    Value: !GetAtt WebsiteHostnameRedirectLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteHostnameRedirectLambdaArn"