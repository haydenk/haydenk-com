AWSTemplateFormatVersion: '2010-09-09'
Description: haydenk.com Deployment Stack
Parameters:
  WebsiteS3Bucket:
    Type: String
  PrimaryDomain:
    Type: String
  SecondaryDomain:
    Type: String
  CertificateId:
    Type: String
  HostedZone:
    Type: String
  ManagedCachingOptimizedPolicy:
    Type: String
    Default: 658327ea-f89d-4fab-a63d-7e88639e58f6
  ManagedOriginRequestPolicyUserAgentRefererHeaders:
    Type: String
    Default: acba4595-bd28-49b8-b9fe-13317c0390fa
  ProjectIdTag:
    Type: String
    Default: haydenk.com
Resources:
  WebS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteS3Bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  WebS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            NotPrincipal:
              AWS:
                Fn::Join:
                  - ' '
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - !Ref WebsiteCloudfrontOriginId
            Action:
              - 's3:GetObject'
            Resource:
              - Fn::Join:
                  - '/'
                  - - Fn::GetAtt: WebS3Bucket.Arn
                    - '*'
          - Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ' '
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - !Ref WebsiteCloudfrontOriginId
            Action:
              - 's3:GetObject'
            Resource:
              - Fn::Join:
                  - '/'
                  - - Fn::GetAtt: WebS3Bucket.Arn
                    - '*'

  WebsiteCloudfrontOriginId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebS3Bucket

  WebsiteHostnameRedirectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hostname-redirect-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource:
                  - Fn::Join:
                      - ':'
                      - - 'arn:aws:logs'
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - Fn::Join:
                      - ':'
                      - - 'arn:aws:logs'
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource:
                  - Fn::Join:
                      - ':'
                      - - 'arn:aws:logs'
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - 'log-group'
                        - Fn::Join:
                            - '/'
                            - - '/aws/lambda'
                              - 'haydenk-com-hostname-redirect'
                        - '*'
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  WebsiteHostnameRedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: haydenk-com-hostname-redirect
      Description: |
        This is an embedded lambda@edge in CloudFront
        that redirects any request where the hostname
        is not the same as the primary domain TO the primary domain.
      Role: !GetAtt WebsiteHostnameRedirectLambdaRole.Arn
      Code:
        ZipFile: |
          'use strict';
          exports.handler = async (event, context) => {
              const request = event.Records[0].cf.request;
              const headers = request.headers;
              const primary_host_url = 'haydenk.com';

              if (headers.host[0].value == primary_host_url) {
                  return request;
              }

              /*
              * Generate HTTP redirect response with 302 status code and Location header.
              */
              let redirectUrl = `https://${primary_host_url}${request.uri}`;
              if (request.querystring) {
                  redirectUrl += `?${request.querystring}`
              }
              const response = {
                  status: '302',
                  statusDescription: 'Found',
                  headers: {
                      location: [{
                          key: 'Location',
                          value: redirectUrl,
                      }],
                  },
              };
              return response;
          };
      Handler: index.handler
      Runtime: nodejs12.x
      TracingConfig:
        Mode: Active
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  WebsiteHostnameRedirectLambdaVersionA:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref WebsiteHostnameRedirectLambda

  WebsiteCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref PrimaryDomain
          - !Ref SecondaryDomain
        DefaultCacheBehavior:
          TargetOriginId: !Ref WebS3Bucket
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: !Ref ManagedCachingOptimizedPolicy
          OriginRequestPolicyId: !Ref ManagedOriginRequestPolicyUserAgentRefererHeaders
          SmoothStreaming: false
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: false
              LambdaFunctionARN: !Ref WebsiteHostnameRedirectLambdaVersionA
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: !Ref WebS3Bucket
            DomainName:
              Fn::Join:
                - '.'
                - - !Ref WebS3Bucket
                  - 's3'
                  - !Ref AWS::Region
                  - 'amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - '/'
                  - - 'origin-access-identity'
                    - 'cloudfront'
                    - !Ref WebsiteCloudfrontOriginId
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn:
            Fn::Join:
              - ':'
              - - 'arn:aws:acm'
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - !Join ['/', ['certificate', !Ref CertificateId]]
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectIdTag

  PrimaryDomainRecordV4:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PrimaryDomain
      Type: A
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  PrimaryDomainRecordV6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PrimaryDomain
      Type: AAAA
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  SecondaryDomainRecordV4:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref SecondaryDomain
      Type: A
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

  SecondaryDomainRecordV6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref SecondaryDomain
      Type: AAAA
      AliasTarget:
        HostedZoneId: 'Z2FDTNDATAQYW2'
        DNSName: !GetAtt WebsiteCloudFront.DomainName
        EvaluateTargetHealth: true

Outputs:
  RedirectLambdaName:
    Value: !Ref WebsiteHostnameRedirectLambda
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-WebsiteHostnameRedirectLambda"
  RedirectLambdaArn:
    Value: !GetAtt WebsiteHostnameRedirectLambda.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-WebsiteHostnameRedirectLambdaArn"